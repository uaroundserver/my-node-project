require('dotenv').config();

const express = require('express');
const cors = require('cors');
const { MongoClient, ObjectId } = require('mongodb');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 5000;

app.use(cors());
// –î–ª—è base64-–∞–≤–∞—Ç–∞—Ä–∞ –¥–æ ~5 –ú–ë
app.use(express.json({ limit: '6mb' }));

let db;
const client = new MongoClient(process.env.MONGO_URI);

async function connectDB() {
  try {
    await client.connect();
    db = client.db('DBUA');
    // —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email
    await db.collection('users').createIndex({ email: 1 }, { unique: true });
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
  }
}
connectDB();

// –ü–æ—á—Ç–∞
const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS },
});

// JWT middleware
function authMiddleware(req, res, next) {
  const authHeader = req.headers['authorization'];
  if (!authHeader) return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  const token = authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });

  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
    req.userId = decoded.userId;
    next();
  });
}

// –ê–∫—Ç–∏–≤–∞—Ü–∏—è
app.get('/activate/:token', async (req, res) => {
  try {
    const { token } = req.params;
    const user = await db.collection('users').findOne({
      activationToken: token,
      activationExpires: { $gt: new Date() },
    });

    if (!user) {
      return res.status(400).send(`
        <h2>‚õî –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞</h2>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.</p>
      `);
    }

    await db.collection('users').updateOne(
      { _id: user._id },
      { $set: { activated: true }, $unset: { activationToken: '', activationExpires: '' } }
    );

    res.send(`
      <h2>‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</h2>
      <p>–ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç.</p>
      <script>setTimeout(()=>{window.location.href="${process.env.CLIENT_URL}"},3000)</script>
    `);
  } catch (err) {
    console.error(err);
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
  }
});

// –°—Ç–∞—Ç–∏–∫–∞
app.use(express.static('public'));
app.get('/', (_, res) => res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'));

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
app.post('/register', async (req, res) => {
  try {
    let { email, password, country } = req.body;
    if (!email || !password || !country) {
      return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ email, –ø–∞—Ä–æ–ª—å –∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è' });
    }

    email = String(email).trim().toLowerCase(); // ‚Üê –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è

    const existingUser = await db.collection('users').findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const activationToken = crypto.randomBytes(16).toString('hex');
    const activationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000);

    const result = await db.collection('users').insertOne({
      email, // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —É–∂–µ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
      password: hashedPassword,
      country,
      activated: false,
      activationToken,
      activationExpires,
      createdAt: new Date(),
    });

    const activationLink = `${process.env.SERVER_URL}/activate/${activationToken}`;
    await transporter.sendMail({
      from: `"MyApp" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      html: `
        <h3>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</h3>
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:</p>
        <a href="${activationLink}">${activationLink}</a>
        <p><b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 24 —á–∞—Å–∞</p>
      `,
    });

    res.status(201).json({
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.',
      userId: result.insertedId,
    });
  } catch (err) {
    if (err.code === 11000 && err.keyPattern?.email) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// –õ–æ–≥–∏–Ω (JWT)
app.post('/login', async (req, res) => {
  try {
    let { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    email = String(email).trim().toLowerCase(); // ‚Üê –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è

    const user = await db.collection('users').findOne({ email });
    if (!user) return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    if (!user.activated) {
      return res.status(403).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '7d' });
    res.json({ token, userId: user._id });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
  }
});

// –ü—Ä–æ—Ñ–∏–ª—å: –ø–æ–ª—É—á–∏—Ç—å
app.get('/api/user/profile', authMiddleware, async (req, res) => {
  try {
    const user = await db.collection('users').findOne(
      { _id: new ObjectId(req.userId) },
      { projection: { password: 0, activationToken: 0, activationExpires: 0 } }
    );
    if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json(user);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

// –ü—Ä–æ—Ñ–∏–ª—å: –æ–±–Ω–æ–≤–∏—Ç—å (email –∑–¥–µ—Å—å –ù–ï –º–µ–Ω—è–µ–º)
app.put('/api/user/profile', authMiddleware, async (req, res) => {
  try {
    const { fullName, phone } = req.body; // email –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º
    await db.collection('users').updateOne(
      { _id: new ObjectId(req.userId) },
      { $set: { fullName: fullName || '', phone: phone || '' } }
    );
    res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

// –ê–≤–∞—Ç–∞—Ä: –æ–±–Ω–æ–≤–∏—Ç—å (base64 data URL)
app.put('/api/user/avatar', authMiddleware, async (req, res) => {
  try {
    const { avatar } = req.body;
    if (!avatar || typeof avatar !== 'string' || !avatar.startsWith('data:image/')) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
    }

    // —Ä–∞–∑—Ä–µ—à–∏–º —Ç–æ–ª—å–∫–æ jpg/png
    const isOkType = /^data:image\/(png|jpeg|jpg);base64,/i.test(avatar);
    if (!isOkType) {
      return res.status(400).json({ error: '–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ JPG/PNG' });
    }

    // –¥–æ 5 –ú–ë
    const approxBytes = Math.ceil((avatar.length * 3) / 4);
    if (approxBytes > 5 * 1024 * 1024) {
      return res.status(400).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å. 5 –ú–ë)' });
    }

    await db.collection('users').updateOne(
      { _id: new ObjectId(req.userId) },
      { $set: { avatar } }
    );

    res.json({ avatar });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞' });
  }
});

app.listen(PORT, () => {
  console.log(`üîä –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});