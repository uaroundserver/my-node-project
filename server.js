require('dotenv').config(); // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

const express = require('express');
const cors = require('cors');
const { MongoClient, ObjectId } = require('mongodb');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');

const app = express();
const PORT = process.env.PORT || 5000;

// CORS ‚Äî –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ–º–µ–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–∞:
// app.use(cors({ origin: process.env.CLIENT_URL }));
app.use(cors());
app.use(express.json());

let db;
const client = new MongoClient(process.env.MONGO_URI);

async function connectDB() {
  try {
    await client.connect();
    db = client.db('DBUA');
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');
    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å email:
    // await db.collection('users').createIndex({ email: 1 }, { unique: true });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
  }
}
connectDB();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ—á—Ç—ã
const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// --- JWT middleware –¥–ª—è –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ ---
function authMiddleware(req, res, next) {
  const h = req.headers.authorization || '';
  const token = h.startsWith('Bearer ') ? h.slice(7) : null;
  if (!token) return res.status(401).json({ error: '–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞' });
  try {
    req.user = jwt.verify(token, process.env.JWT_SECRET);
    next();
  } catch {
    return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
  }
}

/**
 * –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è 24 —á–∞—Å–∞
 * (—Å—Ç–∞–≤–∏–º –î–û —Å—Ç–∞—Ç–∏–∫–∏!)
 */
app.get('/activate/:token', async (req, res) => {
  try {
    const { token } = req.params;

    const user = await db.collection('users').findOne({
      activationToken: token,
      activationExpires: { $gt: new Date() }, // —Å—Å—ã–ª–∫–∞ –µ—â—ë –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞
    });

    if (!user) {
      return res.status(400).send(`
        <h2>‚õî –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞</h2>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.</p>
      `);
    }

    await db.collection('users').updateOne(
      { _id: user._id },
      {
        $set: { activated: true },
        $unset: { activationToken: '', activationExpires: '' },
      }
    );

    res.send(`
      <h2>‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</h2>
      <p>–ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç.</p>
      <script>
        setTimeout(() => {
          window.location.href = "${process.env.CLIENT_URL}";
        }, 3000);
      </script>
    `);
  } catch (err) {
    console.error(err);
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
  }
});

// –°—Ç–∞—Ç–∏–∫–∞ (–ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏)
app.use(express.static('public'));

app.get('/', (req, res) => {
  res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!');
});

/**
 * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ‚Äî email –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä + —Ç–æ–∫–µ–Ω –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Å –∏—Å—Ç–µ—á–µ–Ω–∏–µ–º 24 —á–∞—Å–∞
 */
app.post('/register', async (req, res) => {
  try {
    let { email, password, country } = req.body;
    email = (email || '').toLowerCase();

    if (!email || !password || !country) {
      return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ email, –ø–∞—Ä–æ–ª—å –∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è' });
    }

    const existingUser = await db.collection('users').findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const activationToken = crypto.randomBytes(16).toString('hex');
    const activationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 —á–∞—Å–∞

    const result = await db.collection('users').insertOne({
      email,
      password: hashedPassword,
      country,
      activated: false,
      activationToken,
      activationExpires,
      createdAt: new Date(),
    });

    const activationLink = `${process.env.SERVER_URL}/activate/${activationToken}`;

    await transporter.sendMail({
      from: `"UAround" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      html: `
        <h3>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</h3>
        <p>–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:</p>
        <a href="${activationLink}">${activationLink}</a>
        <p><b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏:</b> 24 —á–∞—Å–∞</p>
      `,
    });

    res.status(201).json({
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.',
      userId: result.insertedId,
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

/**
 * –í—Ö–æ–¥ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π JWT
 */
app.post('/login', async (req, res) => {
  try {
    let { email, password } = req.body;
    email = (email || '').toLowerCase();

    if (!email || !password) {
      return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    const user = await db.collection('users').findOne({ email });
    if (!user) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    if (!user.activated) {
      return res.status(403).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ' });
    }

    const token = jwt.sign(
      { sub: user._id.toString(), email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: process.env.JWT_EXPIRES || '7d' }
    );

    res.json({ token }); // —Ñ—Ä–æ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç—Ç–æ –∫–∞–∫ userToken
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
  }
});

/**
 * –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (GET/PUT)
 * –¢—Ä–µ–±—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫: Authorization: Bearer <token>
 */
app.get('/api/user/profile', authMiddleware, async (req, res) => {
  try {
    const user = await db.collection('users').findOne(
      { _id: new ObjectId(req.user.sub) },
      { projection: { password: 0, activationToken: 0, activationExpires: 0 } }
    );
    if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    res.json({
      fullName: user.fullName || '',
      email: user.email,
      phone: user.phone || '',
      country: user.country || ''
    });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

app.put('/api/user/profile', authMiddleware, async (req, res) => {
  try {
    const { fullName, email, phone } = req.body || {};
    await db.collection('users').updateOne(
      { _id: new ObjectId(req.user.sub) },
      {
        $set: {
          fullName: fullName || '',
          email: (email || '').toLowerCase() || undefined,
          phone: phone || ''
        }
      }
    );
    res.json({ message: 'OK' });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, () => {
  console.log(`üîä –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});