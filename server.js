require('dotenv').config();

const express = require('express');
const cors = require('cors');
const { MongoClient, ObjectId } = require('mongodb');
const bcrypt = require('bcrypt');
const nodemailer = require('nodemailer');
const crypto = require('crypto');
const jwt = require('jsonwebtoken');
const app = express();


// http + —á–∞—Ç (Socket.IO)
const http = require('http');
const { initChat } = require('./chat');


const PORT = process.env.PORT || 5000;

// http-—Å–µ—Ä–≤–µ—Ä (–≤–∞–∂–Ω–æ –¥–ª—è socket.io)
const server = http.createServer(app);

app.use(cors());
app.use(express.json({ limit: '6mb' })); // –¥–ª—è base64 –∞–≤–∞—Ç–∞—Ä–æ–≤

let db;
const client = new MongoClient(process.env.MONGO_URI);

// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ —Å—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞/—á–∞—Ç–∞
async function connectDB() {
  try {
    await client.connect();
    db = client.db('DBUA');
    // === elevate admin (one-shot) ===
    await elevateAdminOnce(db);
    await db.collection('users').createIndex({ email: 1 }, { unique: true });
    console.log('‚úÖ MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞');

// –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mongo:
app.locals.db = db;





    // –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Ç (routes + socket.io)
    initChat(server, db, app);

    // –∑–∞–ø—É—Å–∫–∞–µ–º http-—Å–µ—Ä–≤–µ—Ä
    server.listen(PORT, () => {
      console.log(`üîä –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err);
  }
}
connectDB();

// –ü–æ—á—Ç–∞
const transporter = nodemailer.createTransport({
  service: 'Gmail',
  auth: { user: process.env.EMAIL_USER, pass: process.env.EMAIL_PASS },
});

// JWT middleware
function authMiddleware(req, res, next) {
  const authHeader = req.headers['authorization'];
  if (!authHeader) return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });
  const token = authHeader.split(' ')[1];
  if (!token) return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' });

  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {
    if (err) return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π —Ç–æ–∫–µ–Ω' });
    req.userId = decoded.userId;
    next();
  });
}

// üîë –ê–¥–º–∏–Ω middleware
async function adminMiddleware(req, res, next) {
  try {
    const user = await db.collection('users').findOne({ _id: new ObjectId(req.userId) });
    if (!user || user.role !== 'admin') {
      return res.status(403).json({ error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (admin only)' });
    }
    next();
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ adminMiddleware:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
}

// === –ê–¥–º–∏–Ω –º–∞—Ä—à—Ä—É—Ç—ã ===
app.get('/api/admin/users', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const users = await db.collection('users')
      .find({}, { projection: { password: 0 } })
      .sort({ createdAt: -1 })
      .toArray();
    res.json(users);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π' });
  }
});

app.delete('/api/admin/users/:id', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    await db.collection('users').deleteOne({ _id: new ObjectId(id) });
    res.json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
  }
});

app.put('/api/admin/users/:id/role', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const { id } = req.params;
    const { role } = req.body;
    await db.collection('users').updateOne(
      { _id: new ObjectId(id) },
      { $set: { role } }
    );
    res.json({ message: '–†–æ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏' });
  }
});

// === –ê–∫—Ç–∏–≤–∞—Ü–∏—è ===
app.get('/activate/:token', async (req, res) => {
  try {
    const { token } = req.params;
    const user = await db.collection('users').findOne({
      activationToken: token,
      activationExpires: { $gt: new Date() },
    });

    if (!user) {
      return res.status(400).send(`
        <h2>‚õî –°—Å—ã–ª–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –∏—Å—Ç–µ–∫–ª–∞</h2>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.</p>
      `);
    }

    await db.collection('users').updateOne(
      { _id: user._id },
      { $set: { isActive: true }, $unset: { activationToken: '', activationExpires: '' } }
    );

    res.send(`
      <h2>‚úÖ –ê–∫–∫–∞—É–Ω—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</h2>
      <p>–ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –≤—ã –±—É–¥–µ—Ç–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞ —Å–∞–π—Ç.</p>
      <script>setTimeout(()=>{window.location.href="${loginPage}"},2000)</script>
    `);
  } catch (err) {
    console.error(err);
    res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞');
  }
});

// === –°—Ç–∞—Ç–∏–∫–∞ ===
app.use(express.static('public'));
app.get('/', (_, res) => res.send('–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'));

// === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è ===
app.post('/register', async (req, res) => {
  try {
    let { email, password, country } = req.body;
    if (!email || !password || !country) {
      return res.status(400).json({ error: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ email, –ø–∞—Ä–æ–ª—å –∏ —Å—Ç—Ä–∞–Ω—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è' });
    }

    email = String(email).trim().toLowerCase();

    const existingUser = await db.collection('users').findOne({ email });
    if (existingUser) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const activationToken = crypto.randomBytes(16).toString('hex');
    const activationExpires = new Date(Date.now() + 24 * 60 * 60 * 1000);

    const result = await db.collection('users').insertOne({
      email,
      password: hashedPassword,
      country,
      isActive: false,
      activationToken,
      activationExpires,
      role: 'user', // üëà –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
      createdAt: new Date(),
    });

    const activationLink = `${process.env.SERVER_URL}/activate/${activationToken}`;
    await transporter.sendMail({
      from: `"UAround" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      html: `
        <h3>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</h3>
        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –∞–∫–∫–∞—É–Ω—Ç –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ:</p>
        <a href="${activationLink}">${activationLink}</a>
        <p><b>–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:</b> 24 —á–∞—Å–∞</p>
      `,
    });

    res.status(201).json({
      message: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.',
      userId: result.insertedId,
    });
  } catch (err) {
    if (err.code === 11000 && err.keyPattern?.email) {
      return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
    }
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
  }
});

// === –õ–æ–≥–∏–Ω (JWT) ===
app.post('/login', async (req, res) => {
  try {
    let { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ error: 'Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
    }

    email = String(email).trim().toLowerCase();

    const user = await db.collection('users').findOne({ email });
    if (!user) return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    if (!user.isActive) {
      return res.status(403).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.' });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '7d' });
    res.json({ token, userId: user._id, role: user.role });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
  }
});

// === –ü—Ä–æ—Ñ–∏–ª—å: –ø–æ–ª—É—á–∏—Ç—å ===
app.get('/api/user/profile', authMiddleware, async (req, res) => {
  try {
    const user = await db.collection('users').findOne(
      { _id: new ObjectId(req.userId) },
      { projection: { password: 0, activationToken: 0, activationExpires: 0 } }
    );
    if (!user) return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json(user);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

// === –ü—Ä–æ—Ñ–∏–ª—å: –æ–±–Ω–æ–≤–∏—Ç—å ===
app.put('/api/user/profile', authMiddleware, async (req, res) => {
  try {
    const { fullName, phone } = req.body;
    await db.collection('users').updateOne(
      { _id: new ObjectId(req.userId) },
      { $set: { fullName: fullName || '', phone: phone || '' } }
    );
    res.json({ message: '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

// === –ê–≤–∞—Ç–∞—Ä: base64 JPG/PNG –¥–æ 5 –ú–ë ===
app.put('/api/user/avatar', authMiddleware, async (req, res) => {
  try {
    const { avatar } = req.body;
    if (!avatar || typeof avatar !== 'string' || !avatar.startsWith('data:image/')) {
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è' });
    }

    const isOkType = /^data:image\/(png|jpeg|jpg);base64,/i.test(avatar);
    if (!isOkType) {
      return res.status(400).json({ error: '–î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ JPG/PNG' });
    }

    const approxBytes = Math.ceil((avatar.length * 3) / 4);
    if (approxBytes > 5 * 1024 * 1024) {
      return res.status(400).json({ error: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ (–º–∞–∫—Å. 5 –ú–ë)' });
    }

    await db.collection('users').updateOne(
      { _id: new ObjectId(req.userId) },
      { $set: { avatar } }
    );

    res.json({ avatar });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∞' });
  }
});

// –û–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø—Ä–∞–≤: –±–µ—Ä—ë—Ç email –∏–∑ ENV –∏ –¥–µ–ª–∞–µ—Ç —Ä–æ–ª—å admin
async function elevateAdminOnce(db) {
  try {
    const email = (process.env.SEED_ADMIN_EMAIL || '').trim().toLowerCase();
    if (!email) {
      console.log('[seed-admin] SEED_ADMIN_EMAIL –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é');
      return;
    }

    const u = await db.collection('users').findOne({ email });
    if (!u) {
      console.log(`[seed-admin] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å email ${email} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    const update = {
      role: 'admin',
      isBanned: false,
      isMuted: false,
      updatedAt: new Date()
    };

    const r = await db.collection('users').updateOne(
      { _id: u._id },
      { $set: update }
    );

    if (r.modifiedCount === 1) {
      console.log(`[seed-admin] OK: ${email} —Ç–µ–ø–µ—Ä—å admin`);
    } else {
      console.log(`[seed-admin] –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ admin)`);
    }

    // ‚ö†Ô∏è –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ø–æ—Å–ª–µ —É–¥–∞—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –£–î–ê–õ–ò –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SEED_ADMIN_EMAIL –≤ Render/ENV
    // —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–ø–ª–æ—è—Ö —ç—Ç–æ –±–æ–ª—å—à–µ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–ª–æ—Å—å.
  } catch (e) {
    console.error('[seed-admin] –û—à–∏–±–∫–∞:', e);
  }
}

// === –ê–¥–º–∏–Ω–∫–∞: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===
app.get('/api/admin/me', authMiddleware, adminMiddleware, async (req, res) => {
  res.json({ ok: true, userId: req.userId });
});

app.get('/api/admin/stats', authMiddleware, adminMiddleware, async (req, res) => {
  try {
    const users = await db.collection('users').countDocuments();
    const messages = await db.collection('messages').countDocuments({ deleted: { $ne: true } });
    const recent7d = await db.collection('users').countDocuments({
      createdAt: { $gte: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000) }
    });

    res.json({ users, messages, recent7d });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ admin/stats:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});


// === –ê–¥–º–∏–Ω: ban / unban / mute / unmute ===
// (–¥–æ–±–∞–≤–æ—á–Ω—ã–π –∫–æ–¥; —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–µ –º–µ–Ω—è–µ–º)

function ensureValidId(id, res) {
  if (!ObjectId.isValid(id)) {
    res.status(400).json({ error: 'bad id' });
    return false;
  }
  return true;
}

// BAN
app.post('/api/admin/users/:id/ban', authMiddleware, adminMiddleware, async (req, res) => {
  const { id } = req.params;
  if (!ensureValidId(id, res)) return;
  try {
    const r = await db.collection('users').updateOne(
      { _id: new ObjectId(id) },
      { $set: { isBanned: true } }
    );
    if (!r.matchedCount) return res.status(404).json({ error: 'user not found' });
    res.json({ ok: true, userId: id, isBanned: true });
  } catch (e) {
    console.error('admin ban error:', e);
    res.status(500).json({ error: 'ban failed' });
  }
});

// UNBAN
app.delete('/api/admin/users/:id/ban', authMiddleware, adminMiddleware, async (req, res) => {
  const { id } = req.params;
  if (!ensureValidId(id, res)) return;
  try {
    const r = await db.collection('users').updateOne(
      { _id: new ObjectId(id) },
      { $set: { isBanned: false } }
    );
    if (!r.matchedCount) return res.status(404).json({ error: 'user not found' });
    res.json({ ok: true, userId: id, isBanned: false });
  } catch (e) {
    console.error('admin unban error:', e);
    res.status(500).json({ error: 'unban failed' });
  }
});

// MUTE
app.post('/api/admin/users/:id/mute', authMiddleware, adminMiddleware, async (req, res) => {
  const { id } = req.params;
  if (!ensureValidId(id, res)) return;
  try {
    const r = await db.collection('users').updateOne(
      { _id: new ObjectId(id) },
      { $set: { isMuted: true } }
    );
    if (!r.matchedCount) return res.status(404).json({ error: 'user not found' });
    res.json({ ok: true, userId: id, isMuted: true });
  } catch (e) {
    console.error('admin mute error:', e);
    res.status(500).json({ error: 'mute failed' });
  }
});

// UNMUTE
app.delete('/api/admin/users/:id/mute', authMiddleware, adminMiddleware, async (req, res) => {
  const { id } = req.params;
  if (!ensureValidId(id, res)) return;
  try {
    const r = await db.collection('users').updateOne(
      { _id: new ObjectId(id) },
      { $set: { isMuted: false } }
    );
    if (!r.matchedCount) return res.status(404).json({ error: 'user not found' });
    res.json({ ok: true, userId: id, isMuted: false });
  } catch (e) {
    console.error('admin unmute error:', e);
    res.status(500).json({ error: 'unmute failed' });
  }
});

// (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ä—É—á–∫–∞, –µ—Å–ª–∏ —Ñ—Ä–æ–Ω—Ç —à–ª—ë—Ç action –≤ –æ–¥–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ
app.patch('/api/admin/users/:id', authMiddleware, adminMiddleware, async (req, res) => {
  const { id } = req.params;
  const { action } = req.body || {};
  if (!ensureValidId(id, res)) return;

  const map = {
    ban:   { isBanned: true },
    unban: { isBanned: false },
    mute:  { isMuted: true },
    unmute:{ isMuted: false },
  };
  if (!map[action]) return res.status(400).json({ error: 'bad action' });

  try {
    const r = await db.collection('users').updateOne(
      { _id: new ObjectId(id) },
      { $set: map[action] }
    );
    if (!r.matchedCount) return res.status(404).json({ error: 'user not found' });
    res.json({ ok: true, userId: id, ...map[action] });
  } catch (e) {
    console.error('admin action error:', e);
    res.status(500).json({ error: 'action failed' });
  }
});